# Generated by Django 3.2 on 2023-01-22 19:18

import django.contrib.auth.validators
import django.core.validators
import django.db.models.deletion
import django.utils.timezone
from django.conf import settings
from django.db import migrations, models

import utils.custom_manager


def createsuperuser(apps, schema):
    user = apps.get_model("backend.User")
    user.objects.createsuperuser(
        email="admin@gmail.com",
        password="admin",
    )
    print("\n  **************************  \n")
    print("\n  superuser has been created  \n")
    print("\n  **************************")


class Migration(migrations.Migration):
    initial = True

    dependencies = [
        ('auth', '0012_alter_user_first_name_max_length'),
    ]

    operations = [
        migrations.CreateModel(
            name='User',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('password', models.CharField(max_length=128, verbose_name='password')),
                ('last_login', models.DateTimeField(blank=True, null=True, verbose_name='last login')),
                ('is_superuser', models.BooleanField(default=False,
                                                     help_text='Designates that this user has all permissions without explicitly assigning them.',
                                                     verbose_name='superuser status')),
                ('username', models.CharField(error_messages={'unique': 'A user with that username already exists.'},
                                              help_text='Required. 150 characters or fewer. Letters, digits and @/./+/-/_ only.',
                                              max_length=150, unique=True,
                                              validators=[django.contrib.auth.validators.UnicodeUsernameValidator()],
                                              verbose_name='username')),
                ('first_name', models.CharField(blank=True, max_length=150, verbose_name='first name')),
                ('last_name', models.CharField(blank=True, max_length=150, verbose_name='last name')),
                ('is_staff', models.BooleanField(default=False,
                                                 help_text='Designates whether the user can log into this admin site.',
                                                 verbose_name='staff status')),
                ('date_joined', models.DateTimeField(default=django.utils.timezone.now, verbose_name='date joined')),
                ('email', models.EmailField(max_length=254, unique=True)),
                ('role',
                 models.CharField(choices=[('admin', 'admin'), ('job_hunter', 'job_hunter')], default='job_hunter',
                                  max_length=50)),
                ('is_active', models.BooleanField(default=True)),
                ('groups', models.ManyToManyField(blank=True,
                                                  help_text='The groups this user belongs to. A user will get all permissions granted to each of their groups.',
                                                  related_name='user_set', related_query_name='user', to='auth.Group',
                                                  verbose_name='groups')),
                ('user_permissions', models.ManyToManyField(blank=True, help_text='Specific permissions for this user.',
                                                            related_name='user_set', related_query_name='user',
                                                            to='auth.Permission', verbose_name='user permissions')),
            ],
            options={
                'verbose_name': 'user',
                'verbose_name_plural': 'users',
                'abstract': False,
            },
            managers=[
                ('objects', utils.custom_manager.UserManager()),
            ],
        ),
        migrations.CreateModel(
            name='BaseModel',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('created_at', models.DateTimeField(auto_now_add=True)),
                ('updated_at', models.DateTimeField(auto_now=True)),
                ('is_active', models.BooleanField(default=True)),
            ],
        ),
        migrations.CreateModel(
            name='Job',
            fields=[
                ('basemodel_ptr',
                 models.OneToOneField(auto_created=True, on_delete=django.db.models.deletion.CASCADE, parent_link=True,
                                      primary_key=True, serialize=False, to='backend.basemodel')),
                ('title', models.CharField(max_length=255)),
                ('type', models.CharField(
                    choices=[('full_time', 'Full Time'), ('part_time', 'Part Time'), ('Internship', 'Internship')],
                    max_length=50)),
                ('location', models.CharField(max_length=50)),
                ('salary', models.IntegerField(blank=True, null=True)),
                ('company_name', models.CharField(max_length=50)),
                ('workplace',
                 models.CharField(choices=[('onsite', 'Onsite'), ('hybrid', 'Hybrid'), ('remote', 'Remote')],
                                  max_length=50)),
                ('description', models.TextField()),
                ('experience_level',
                 models.CharField(choices=[('entry', 'Entry'), ('mid', 'Mid'), ('senior', 'Senior')], max_length=50)),
                ('status', models.CharField(choices=[('open', 'Open'), ('occupied', 'Occupied'), ('closed', 'Closed')],
                                            max_length=50)),
            ],
            bases=('backend.basemodel',),
        ),
        migrations.CreateModel(
            name='Application',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('first_name', models.CharField(max_length=150)),
                ('last_name', models.CharField(max_length=150)),
                ('email', models.EmailField(max_length=254, unique=True)),
                ('resume', models.FileField(upload_to='resume', validators=[
                    django.core.validators.FileExtensionValidator(['pdf', 'doc', 'docx'])])),
                ('user',
                 models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='user_in_application',
                                   to=settings.AUTH_USER_MODEL)),
                ('job',
                 models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='job_in_application',
                                   to='backend.job')),
            ],
        ),
        migrations.RunPython(createsuperuser)
    ]
